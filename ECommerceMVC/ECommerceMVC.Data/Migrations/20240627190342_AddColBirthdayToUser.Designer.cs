// <auto-generated />
using System;
using ECommerceMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceMVC.Data.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    [Migration("20240627190342_AddColBirthdayToUser")]
    partial class AddColBirthdayToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceMVC.Data.DbAdvertisingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__db_Adver__3213E83FB9810C73");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Adver__3213E83EF258E9F4")
                        .IsUnique();

                    b.ToTable("db_Advertising_Group", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbAuction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_product");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("removedAt");

                    b.Property<double>("StartingPrice")
                        .HasColumnType("float")
                        .HasColumnName("starting_price");

                    b.HasKey("Id")
                        .HasName("PK__db_Aucti__3213E83FCCC7C676");

                    b.HasIndex(new[] { "IdProduct" }, "IX_db_Auction_id_product");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Aucti__3213E83E4C02198B")
                        .IsUnique();

                    b.ToTable("db_Auction", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbAuctionRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<int>("IdAuction")
                        .HasColumnType("int")
                        .HasColumnName("id_auction");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_user");

                    b.Property<double>("PriceGiven")
                        .HasColumnType("float")
                        .HasColumnName("price_given");

                    b.HasKey("Id")
                        .HasName("PK__db_Aucti__3213E83F8CAE048F");

                    b.HasIndex(new[] { "IdAuction" }, "IX_db_Auction_Round_id_auction");

                    b.HasIndex(new[] { "IdUser" }, "IX_db_Auction_Round_id_user");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Aucti__3213E83E0F3DEF2D")
                        .IsUnique();

                    b.ToTable("db_Auction_Round", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<int?>("IdCategoryParent")
                        .HasColumnType("int")
                        .HasColumnName("id_category_parent");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__db_Categ__3213E83F81D04C20");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Categ__3213E83E90881A63")
                        .IsUnique();

                    b.ToTable("db_Category", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__db_Color__3213E83F88252288");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Color__3213E83E5FAC0072")
                        .IsUnique();

                    b.ToTable("db_Color", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_product");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_user");

                    b.HasKey("Id")
                        .HasName("PK__db_Comme__3213E83FC9C7D131");

                    b.HasIndex(new[] { "IdProduct" }, "IX_db_Comment_id_product");

                    b.HasIndex(new[] { "IdUser" }, "IX_db_Comment_id_user");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Comme__3213E83E83DCDE4C")
                        .IsUnique();

                    b.ToTable("db_Comment", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<int>("DisplayQuantity")
                        .HasColumnType("int")
                        .HasColumnName("display_quantity");

                    b.Property<int?>("IdGroupParent")
                        .HasColumnType("int")
                        .HasColumnName("id_group_parent");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__db_Group__3213E83F60BDADE2");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Group__3213E83E7D3A97F3")
                        .IsUnique();

                    b.ToTable("db_Group", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("PK__db_Image__3213E83F067CAA6F");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Image__3213E83ECE5D1F75")
                        .IsUnique();

                    b.ToTable("db_Image", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdStaff")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_staff");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_user");

                    b.Property<double>("IntoMoney")
                        .HasColumnType("float")
                        .HasColumnName("into_money");

                    b.Property<string>("NameStaff")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name_staff");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name_user");

                    b.HasKey("Id")
                        .HasName("PK__db_Invoi__3213E83F3439CF29");

                    b.HasIndex(new[] { "IdStaff" }, "IX_db_Invoice_id_staff");

                    b.HasIndex(new[] { "IdUser" }, "IX_db_Invoice_id_user");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Invoi__3213E83E26389EE4")
                        .IsUnique();

                    b.ToTable("db_Invoice", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbInvoiceDetail", b =>
                {
                    b.Property<int>("IdInvoice")
                        .HasColumnType("int")
                        .HasColumnName("id_invoice");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.HasKey("IdInvoice", "IdProduct")
                        .HasName("PK__db_Invoi__76F2AD7781ABE8D2");

                    b.HasIndex(new[] { "IdProduct" }, "IX_db_Invoice_Detail_id_product");

                    b.ToTable("db_Invoice_Detail", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__db_Mater__3213E83FBE99EB8A");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Mater__3213E83EA760629B")
                        .IsUnique();

                    b.ToTable("db_Material", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<int?>("IdMenuParent")
                        .HasColumnType("int")
                        .HasColumnName("id_menu_parent");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__db_Menu__3213E83F55CB1853");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Menu__3213E83E0D98ACEE")
                        .IsUnique();

                    b.ToTable("db_Menu", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbNew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("describe");

                    b.Property<int>("IdNewCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_new_category");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<int>("View")
                        .HasColumnType("int")
                        .HasColumnName("view");

                    b.HasKey("Id")
                        .HasName("PK__db_New__3213E83F63CC78E1");

                    b.HasIndex(new[] { "IdNewCategory" }, "IX_db_New_id_new_category");

                    b.HasIndex(new[] { "Id" }, "UQ__db_New__3213E83E3BC217F6")
                        .IsUnique();

                    b.ToTable("db_New", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbNewCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<int?>("IdNewParent")
                        .HasColumnType("int")
                        .HasColumnName("id_new_parent");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__db_New_C__3213E83F94361708");

                    b.HasIndex(new[] { "Id" }, "UQ__db_New_C__3213E83E05841274")
                        .IsUnique();

                    b.ToTable("db_New_Category", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_user");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_user");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_user");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name_user");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentType");

                    b.Property<string>("PhoneUser")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_user");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("PK__db_Order__3213E83FC55D56BD");

                    b.HasIndex(new[] { "IdUser" }, "IX_db_Order_id_user");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Order__3213E83E10DFBEA2")
                        .IsUnique();

                    b.ToTable("db_Order", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbOrderDetail", b =>
                {
                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_product");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int")
                        .HasColumnName("id_order");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.HasKey("IdProduct", "IdOrder")
                        .HasName("PK__db_Order__57EC50BC88258AE2");

                    b.HasIndex(new[] { "IdOrder" }, "IX_db_Order_Details_id_order");

                    b.ToTable("db_Order_Details", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_category");

                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("id_group");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("removedAt");

                    b.Property<int>("View")
                        .HasColumnType("int")
                        .HasColumnName("view");

                    b.HasKey("Id")
                        .HasName("PK__db_Produ__3213E83F649DB81A");

                    b.HasIndex(new[] { "IdCategory" }, "IX_db_Product_id_category");

                    b.HasIndex(new[] { "IdGroup" }, "IX_db_Product_id_group");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Produ__3213E83E14B9A373")
                        .IsUnique();

                    b.ToTable("db_Product", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdColor")
                        .HasColumnType("int")
                        .HasColumnName("id_color");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_product");

                    b.HasKey("Id")
                        .HasName("PK__db_Produ__3213E83F1668A9EA");

                    b.HasIndex(new[] { "IdColor" }, "IX_db_Product_Color_id_color");

                    b.HasIndex(new[] { "IdProduct" }, "IX_db_Product_Color_id_product");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Produ__3213E83E94BC206C")
                        .IsUnique();

                    b.ToTable("db_Product_Color", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdImage")
                        .HasColumnType("int")
                        .HasColumnName("id_image");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_product");

                    b.HasKey("Id")
                        .HasName("PK__db_Produ__3213E83F2F4719FC");

                    b.HasIndex(new[] { "IdImage" }, "IX_db_Product_Image_id_image");

                    b.HasIndex(new[] { "IdProduct" }, "IX_db_Product_Image_id_product");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Produ__3213E83E3D75A638")
                        .IsUnique();

                    b.ToTable("db_Product_Image", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProductMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdMaterial")
                        .HasColumnType("int")
                        .HasColumnName("id_material");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_product");

                    b.HasKey("Id")
                        .HasName("PK__db_Produ__3213E83FAA796C7A");

                    b.HasIndex(new[] { "IdMaterial" }, "IX_db_Product_Material_id_material");

                    b.HasIndex(new[] { "IdProduct" }, "IX_db_Product_Material_id_product");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Produ__3213E83E77FE73E8")
                        .IsUnique();

                    b.ToTable("db_Product_Material", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_product");

                    b.Property<int>("IdSize")
                        .HasColumnType("int")
                        .HasColumnName("id_size");

                    b.HasKey("Id")
                        .HasName("PK__db_Produ__3213E83FCB8DD80D");

                    b.HasIndex(new[] { "IdProduct" }, "IX_db_Product_Size_id_product");

                    b.HasIndex(new[] { "IdSize" }, "IX_db_Product_Size_id_size");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Produ__3213E83E983B254E")
                        .IsUnique();

                    b.ToTable("db_Product_Size", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("id_product");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_user");

                    b.Property<int?>("Star")
                        .HasColumnType("int")
                        .HasColumnName("star");

                    b.HasKey("Id")
                        .HasName("PK__db_Ratin__3213E83FA223E37A");

                    b.HasIndex(new[] { "IdProduct" }, "IX_db_Rating_id_product");

                    b.HasIndex(new[] { "IdUser" }, "IX_db_Rating_id_user");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Ratin__3213E83EB725E587")
                        .IsUnique();

                    b.ToTable("db_Rating", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__db_Size__3213E83F714311FC");

                    b.HasIndex(new[] { "Id" }, "UQ__db_Size__3213E83ED72EA46E")
                        .IsUnique();

                    b.ToTable("db_Size", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK__db_User__3213E83F589D6F1E");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Id" }, "UQ__db_User__3213E83E883C510A")
                        .IsUnique();

                    b.ToTable("db_User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbAuction", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbProduct", "IdProductNavigation")
                        .WithMany("DbAuctions")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("db_Auction_fk3");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbAuctionRound", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbAuction", "IdAuctionNavigation")
                        .WithMany("DbAuctionRounds")
                        .HasForeignKey("IdAuction")
                        .IsRequired()
                        .HasConstraintName("db_Auction_Round_fk4");

                    b.HasOne("ECommerceMVC.Data.DbUser", "IdUserNavigation")
                        .WithMany("DbAuctionRounds")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("db_Auction_Round_fk3");

                    b.Navigation("IdAuctionNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbComment", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbProduct", "IdProductNavigation")
                        .WithMany("DbComments")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("db_Comment_fk1");

                    b.HasOne("ECommerceMVC.Data.DbUser", "IdUserNavigation")
                        .WithMany("DbComments")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("db_Comment_fk2");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbInvoice", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbUser", "IdStaffNavigation")
                        .WithMany("DbInvoiceIdStaffNavigations")
                        .HasForeignKey("IdStaff")
                        .IsRequired()
                        .HasConstraintName("db_Invoice_fk2");

                    b.HasOne("ECommerceMVC.Data.DbUser", "IdUserNavigation")
                        .WithMany("DbInvoiceIdUserNavigations")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("db_Invoice_fk3");

                    b.Navigation("IdStaffNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbInvoiceDetail", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbInvoice", "IdInvoiceNavigation")
                        .WithMany("DbInvoiceDetails")
                        .HasForeignKey("IdInvoice")
                        .IsRequired()
                        .HasConstraintName("db_Invoice_Detail_fk0");

                    b.HasOne("ECommerceMVC.Data.DbProduct", "IdProductNavigation")
                        .WithMany("DbInvoiceDetails")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("db_Invoice_Detail_fk1");

                    b.Navigation("IdInvoiceNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbNew", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbNewCategory", "IdNewCategoryNavigation")
                        .WithMany("DbNews")
                        .HasForeignKey("IdNewCategory")
                        .IsRequired()
                        .HasConstraintName("db_New_fk7");

                    b.Navigation("IdNewCategoryNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbOrder", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbUser", "IdUserNavigation")
                        .WithMany("DbOrders")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("db_Order_fk3");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbOrderDetail", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbOrder", "IdOrderNavigation")
                        .WithMany("DbOrderDetails")
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("db_Order_Details_fk1");

                    b.HasOne("ECommerceMVC.Data.DbProduct", "IdProductNavigation")
                        .WithMany("DbOrderDetails")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("db_Order_Details_fk0");

                    b.Navigation("IdOrderNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProduct", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbCategory", "IdCategoryNavigation")
                        .WithMany("DbProducts")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("db_Product_fk2");

                    b.HasOne("ECommerceMVC.Data.DbGroup", "IdGroupNavigation")
                        .WithMany("DbProducts")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("db_Product_fk3");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProductColor", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbColor", "IdColorNavigation")
                        .WithMany("DbProductColors")
                        .HasForeignKey("IdColor")
                        .IsRequired()
                        .HasConstraintName("db_Product_Color_fk1");

                    b.HasOne("ECommerceMVC.Data.DbProduct", "IdProductNavigation")
                        .WithMany("DbProductColors")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("db_Product_Color_fk2");

                    b.Navigation("IdColorNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProductImage", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbImage", "IdImageNavigation")
                        .WithMany("DbProductImages")
                        .HasForeignKey("IdImage")
                        .IsRequired()
                        .HasConstraintName("db_Product_Image_fk1");

                    b.HasOne("ECommerceMVC.Data.DbProduct", "IdProductNavigation")
                        .WithMany("DbProductImages")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("db_Product_Image_fk2");

                    b.Navigation("IdImageNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProductMaterial", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbMaterial", "IdMaterialNavigation")
                        .WithMany("DbProductMaterials")
                        .HasForeignKey("IdMaterial")
                        .IsRequired()
                        .HasConstraintName("db_Product_Material_fk1");

                    b.HasOne("ECommerceMVC.Data.DbProduct", "IdProductNavigation")
                        .WithMany("DbProductMaterials")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("db_Product_Material_fk2");

                    b.Navigation("IdMaterialNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProductSize", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbProduct", "IdProductNavigation")
                        .WithMany("DbProductSizes")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("db_Product_Size_fk2");

                    b.HasOne("ECommerceMVC.Data.DbSize", "IdSizeNavigation")
                        .WithMany("DbProductSizes")
                        .HasForeignKey("IdSize")
                        .IsRequired()
                        .HasConstraintName("db_Product_Size_fk1");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdSizeNavigation");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbRating", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbProduct", "IdProductNavigation")
                        .WithMany("DbRatings")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("db_Rating_fk1");

                    b.HasOne("ECommerceMVC.Data.DbUser", "IdUserNavigation")
                        .WithMany("DbRatings")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("db_Rating_fk2");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Data.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerceMVC.Data.DbUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbAuction", b =>
                {
                    b.Navigation("DbAuctionRounds");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbCategory", b =>
                {
                    b.Navigation("DbProducts");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbColor", b =>
                {
                    b.Navigation("DbProductColors");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbGroup", b =>
                {
                    b.Navigation("DbProducts");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbImage", b =>
                {
                    b.Navigation("DbProductImages");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbInvoice", b =>
                {
                    b.Navigation("DbInvoiceDetails");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbMaterial", b =>
                {
                    b.Navigation("DbProductMaterials");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbNewCategory", b =>
                {
                    b.Navigation("DbNews");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbOrder", b =>
                {
                    b.Navigation("DbOrderDetails");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbProduct", b =>
                {
                    b.Navigation("DbAuctions");

                    b.Navigation("DbComments");

                    b.Navigation("DbInvoiceDetails");

                    b.Navigation("DbOrderDetails");

                    b.Navigation("DbProductColors");

                    b.Navigation("DbProductImages");

                    b.Navigation("DbProductMaterials");

                    b.Navigation("DbProductSizes");

                    b.Navigation("DbRatings");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbSize", b =>
                {
                    b.Navigation("DbProductSizes");
                });

            modelBuilder.Entity("ECommerceMVC.Data.DbUser", b =>
                {
                    b.Navigation("DbAuctionRounds");

                    b.Navigation("DbComments");

                    b.Navigation("DbInvoiceIdStaffNavigations");

                    b.Navigation("DbInvoiceIdUserNavigations");

                    b.Navigation("DbOrders");

                    b.Navigation("DbRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
